name: frontend-cd-workflow

on:
  push:
    branches:
      - master

  workflow_dispatch:

env:
  REPO_NAME: "project4-frontend"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Node Js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependency
        run: cd starter/frontend &&  npm ci

      - name: Run Test
        run: cd starter/frontend &&  npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Deploy to Kubernetes
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.KUBECONFIG }}" > starter/frontend/k8s/kubeconfig.yaml
          cd starter/frontend/k8s
          kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl apply -f deployment.yml --kubeconfig=kubeconfig.yaml
